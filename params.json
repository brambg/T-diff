{
  "name": "T-diff",
  "tagline": "A tree differencing algorithm",
  "body": "[![Build Status](https://travis-ci.org/cagdasgerede/T-diff.svg?branch=master)](https://travis-ci.org/cagdasgerede/T-diff)\r\n\r\n# T-diff\r\n\r\nThis repository contains the implementation of an algorithm computing the distance between two trees. The algorithm was published in an aricle titled \"The Tree-to-Tree Correction Problem\" by Kuo-Chung Tai at the Journal of the ACM, 26(3):422-433, in July 1979.\r\n\r\nThe time complexity of the algorithm is O(V * V' * L^2 * L'^2) where V, V' are the number of nodes and L, L' are the the maximum depths of the source and target trees respectively.\r\n\r\nDuring the implementation, we came across some minor issues in the reported algorithm. The implementation contains the fixes for these issues.\r\n\r\nAt the moment, the trees are assumed to be instances of Tree class in the tree module contained in the implementation. An example run is below\r\n```python\r\nfrom lib.tree import *\r\nfrom treediff import *\r\n\r\n# Source Tree\r\na = TreeNode('A')\r\nb = TreeNode('B')\r\na.addChild(b)\r\nd = TreeNode('D')\r\nb.addChild(d)\r\ntreeOne = Tree(a)\r\ntreeOne.buildCaches()\r\n\r\n# Target Tree\r\na = TreeNode('A')\r\nb = TreeNode('B')\r\nc = TreeNode('C')\r\nd = TreeNode('D')\r\na.addChild(b)\r\na.addChild(c)\r\nc.addChild(d)\r\ntreeTwo = Tree(a)\r\ntreeTwo.buildCaches()\r\n\r\ndistance, mapping = computeDiff(treeOne, treeTwo) \r\nprint distance # Prints 2\r\nprint mapping # [(1, 1), (2, 3), (3, 4), ('alpha', 2)]\r\nprint produceHumanFriendlyMapping(mapping, treeOne, treeTwo) # ['No change for A (@1 and @1)', 'Change from B (@2) to C (@3)', 'No change for D (@3 and @4)', 'Insert B (@2)']\r\n```\r\n\r\nThe last line shows how to produce the mapping between the source and the target describing how a sequence of edit operations transforms the source tree to the target, ignoring the order in which edit operations are applied.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}